{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "6efbaa39",
   "metadata": {
    "_cell_guid": "18f54e62-a420-45b5-aa62-fef0f4c0808c",
    "_uuid": "f369c071-077e-48b2-b0c9-34396e9ded21",
    "collapsed": false,
    "execution": {
     "iopub.execute_input": "2025-05-23T05:14:21.349015Z",
     "iopub.status.busy": "2025-05-23T05:14:21.348690Z",
     "iopub.status.idle": "2025-05-23T05:14:25.828644Z",
     "shell.execute_reply": "2025-05-23T05:14:25.827560Z"
    },
    "jupyter": {
     "outputs_hidden": false
    },
    "papermill": {
     "duration": 4.484961,
     "end_time": "2025-05-23T05:14:25.830259",
     "exception": false,
     "start_time": "2025-05-23T05:14:21.345298",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Training RMSE: 43733.12\n",
      "Validation RMSE: 50604.83\n",
      "Training R²: 0.71\n",
      "Validation R²: 0.48\n",
      "        Id      SalePrice\n",
      "0     1461  169277.052498\n",
      "1     1462  187758.393989\n",
      "2     1463  183583.683570\n",
      "3     1464  179317.477511\n",
      "4     1465  150730.079977\n",
      "...    ...            ...\n",
      "1454  2915  167081.220949\n",
      "1455  2916  164788.778231\n",
      "1456  2917  219222.423400\n",
      "1457  2918  184924.279659\n",
      "1458  2919  187741.866657\n",
      "\n",
      "[1459 rows x 2 columns]\n"
     ]
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 640x480 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "import pandas as pd\n",
    "from pathlib import Path\n",
    "from zipfile import ZipFile\n",
    "from sklearn.preprocessing import StandardScaler\n",
    "from sklearn.model_selection import train_test_split\n",
    "from sklearn.linear_model import LinearRegression\n",
    "from sklearn.metrics import mean_squared_error, r2_score\n",
    "import os\n",
    "\n",
    "# Create data directory if it doesn't exist\n",
    "iskaggle = os.environ.get(\"KAGGLE_KERNEL_RUN_TYPE\", \"\")\n",
    "if iskaggle:\n",
    "    data_dir = Path(\"/kaggle/input/home-data-for-ml-course\")\n",
    "else:\n",
    "    import kaggle\n",
    "\n",
    "    data_dir = Path(\"data\")\n",
    "    data_dir.mkdir(exist_ok=True)\n",
    "\n",
    "    # Download competition data\n",
    "    competition = \"home-data-for-ml-course\"\n",
    "    kaggle.api.competition_download_files(competition, path=data_dir)\n",
    "    zip_path = data_dir / f\"{competition}.zip\"\n",
    "    assert zip_path.exists()\n",
    "\n",
    "    # Extract the zip file\n",
    "    with ZipFile(zip_path, \"r\") as zip_ref:\n",
    "        zip_ref.extractall(data_dir)\n",
    "\n",
    "data_df = pd.read_csv(data_dir / \"train.csv\")\n",
    "test_df = pd.read_csv(data_dir / \"test.csv\")\n",
    "sample_submission_df = pd.read_csv(data_dir / \"sample_submission.csv\")\n",
    "\n",
    "# View Columns and select features and target variable\n",
    "\n",
    "data_df.columns\n",
    "features = [\"GrLivArea\", \"YearBuilt\", \"FullBath\", \"BedroomAbvGr\", \"TotRmsAbvGrd\"]\n",
    "x = data_df[features]\n",
    "data_df.GrLivArea.mean()\n",
    "data_df.GrLivArea.std()\n",
    "y = data_df.SalePrice\n",
    "x.describe()\n",
    "\n",
    "# Check if data has na values\n",
    "x.isna().sum()\n",
    "\n",
    "# Check for outliers\n",
    "data_df[\"GrLivArea\"].hist()\n",
    "data_df[\"SalePrice\"].hist()\n",
    "data_df[\"GrLivArea\"].describe()\n",
    "data_df[\"SalePrice\"].describe()\n",
    "\n",
    "# Split the data into training and validation sets and check their distributions\n",
    "# It's important to split the data before scaling the features\n",
    "# because the scaler will use the training data to scale the features\n",
    "# and the validation data will be scaled using the training data statistics\n",
    "x_train, x_val, y_train, y_val = train_test_split(x, y, test_size=0.2)\n",
    "pd.concat([x_train, y_train], axis=1).describe()\n",
    "pd.concat([x_val, y_val], axis=1).describe()\n",
    "\n",
    "# Scale the features and target variable\n",
    "# We use fit_transform on the training data to learn the mean and standard deviation of the training data\n",
    "# We use transform on the validation data to scale it using the training data statistics.\n",
    "# The mean and standard deviation of the validation data should not be used because it will bias the model\n",
    "scaler = StandardScaler()\n",
    "x_train_scaled = scaler.fit_transform(x_train)\n",
    "x_val_scaled = scaler.transform(x_val)\n",
    "\n",
    "# Create and train the model\n",
    "model = LinearRegression()\n",
    "model.fit(x_train_scaled, y_train)\n",
    "\n",
    "# Make predictions\n",
    "train_predictions = model.predict(x_train_scaled)\n",
    "val_predictions = model.predict(x_val_scaled)\n",
    "\n",
    "# Calculate metrics\n",
    "train_rmse = mean_squared_error(y_train, train_predictions, squared=False)\n",
    "val_rmse = mean_squared_error(y_val, val_predictions, squared=False)\n",
    "train_r2 = r2_score(y_train, train_predictions)\n",
    "val_r2 = r2_score(y_val, val_predictions)\n",
    "\n",
    "## This initial model is not very accurate so the validation R2 will vary quite a bit\n",
    "print(f\"Training RMSE: {train_rmse:.2f}\")\n",
    "print(f\"Validation RMSE: {val_rmse:.2f}\")\n",
    "print(f\"Training R²: {train_r2:.2f}\")\n",
    "print(f\"Validation R²: {val_r2:.2f}\")\n",
    "\n",
    "# Make predictions on the test set\n",
    "## See how sample submission is structured\n",
    "print(sample_submission_df)\n",
    "\n",
    "## Make predictions on the test set\n",
    "x_test = test_df[features]\n",
    "x_test_scaled = scaler.transform(x_test)\n",
    "test_predictions = model.predict(x_test_scaled)\n",
    "\n",
    "# Transform predictions back to original scale\n",
    "test_predictions_original = test_predictions * y.std() + y.mean()\n",
    "\n",
    "# Create submission file\n",
    "submission_df = pd.DataFrame(\n",
    "    {\"Id\": test_df.Id, \"SalePrice\": test_predictions_original.flatten()}\n",
    ")\n",
    "submission_csv = submission_df.to_csv(\"submission.csv\", index=False)\n",
    "\n",
    "# Upload to Kaggle\n",
    "if False and not iskaggle:\n",
    "    kaggle.api.competition_submit(\n",
    "        \"submission.csv\",\n",
    "        \"House Price Prediction\",\n",
    "        competition,\n",
    "    )"
   ]
  }
 ],
 "metadata": {
  "kaggle": {
   "accelerator": "none",
   "dataSources": [
    {
     "databundleVersionId": 111096,
     "sourceId": 10211,
     "sourceType": "competition"
    }
   ],
   "dockerImageVersionId": 31040,
   "isGpuEnabled": false,
   "isInternetEnabled": true,
   "language": "python",
   "sourceType": "notebook"
  },
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.11.11"
  },
  "papermill": {
   "default_parameters": {},
   "duration": 10.261276,
   "end_time": "2025-05-23T05:14:26.554117",
   "environment_variables": {},
   "exception": null,
   "input_path": "__notebook__.ipynb",
   "output_path": "__notebook__.ipynb",
   "parameters": {},
   "start_time": "2025-05-23T05:14:16.292841",
   "version": "2.6.0"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
