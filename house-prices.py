{"metadata":{"kernelspec":{"language":"python","display_name":"Python 3","name":"python3"},"language_info":{"name":"python","version":"3.11.11","mimetype":"text/x-python","codemirror_mode":{"name":"ipython","version":3},"pygments_lexer":"ipython3","nbconvert_exporter":"python","file_extension":".py"}},"nbformat_minor":4,"nbformat":4,"cells":[{"source":"<a href=\"https://www.kaggle.com/code/declanmckenna/house-prices?scriptVersionId=242917992\" target=\"_blank\"><img align=\"left\" alt=\"Kaggle\" title=\"Open in Kaggle\" src=\"https://kaggle.com/static/images/open-in-kaggle.svg\"></a>","metadata":{},"cell_type":"markdown"},{"cell_type":"code","source":"import pandas as pd\nfrom pathlib import Path\nfrom zipfile import ZipFile\nfrom sklearn.compose import ColumnTransformer\nfrom sklearn.ensemble import RandomForestRegressor\nfrom sklearn.impute import SimpleImputer\nfrom sklearn.pipeline import Pipeline\nfrom sklearn.preprocessing import StandardScaler\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.metrics import mean_squared_error, r2_score\nfrom sklearn.preprocessing import OneHotEncoder\nimport os\n\nSHOULD_SUBMIT_TO_KAGGLE = False\nRANDOM_SEED = 42\n\n# Create data directory if it doesn't exist\nis_running_on_kaggle = os.environ.get(\"KAGGLE_KERNEL_RUN_TYPE\", \"\")\nif is_running_on_kaggle:\n    data_dir = Path(\"/kaggle/input/home-data-for-ml-course\")\nelse:\n    import kaggle\n\n    data_dir = Path(\"data\")\n    data_dir.mkdir(exist_ok=True)\n\n    # Download competition data\n    competition = \"home-data-for-ml-course\"\n    kaggle.api.competition_download_files(competition, path=data_dir)\n    zip_path = data_dir / f\"{competition}.zip\"\n    assert zip_path.exists()\n\n    # Extract the zip file\n    with ZipFile(zip_path, \"r\") as zip_ref:\n        zip_ref.extractall(data_dir)\n\ndata_df = pd.read_csv(data_dir / \"train.csv\", index_col=\"Id\")\ntest_df = pd.read_csv(data_dir / \"test.csv\", index_col=\"Id\")\nsample_submission_df = pd.read_csv(data_dir / \"sample_submission.csv\")\n\n# Split the data into training and validation sets before any preprocessing\nx = data_df.drop(\"SalePrice\", axis=1)\ny = data_df[\"SalePrice\"]\nx_train, x_val, y_train, y_val = train_test_split(\n    x, y, test_size=0.2, random_state=RANDOM_SEED\n)\n\n# Select Features\n## Make a list of numeric features\nnumeric_features = data_df.select_dtypes(include=\"number\").columns\nnumeric_features = numeric_features.drop(\"SalePrice\")\n\n## Make a list of category features\ncategorical_features = data_df.select_dtypes(include=\"object\").columns\n\n# Create pipeline\n## Our preprocessing has grown sufficiently complex to justify using a pipeline\nnumerical_transformer = Pipeline(\n    steps=[\n        (\"imputer\", SimpleImputer(strategy=\"most_frequent\")),\n        (\"scaler\", StandardScaler()),\n    ]\n)\ncategorical_transformer = Pipeline(\n    steps=[\n        (\"imputer\", SimpleImputer(strategy=\"most_frequent\")),\n        (\n            \"one_hot\",\n            OneHotEncoder(sparse_output=False, handle_unknown=\"ignore\"),\n        ),\n    ]\n)\npreprocessor = ColumnTransformer(\n    transformers=[\n        (\"num\", numerical_transformer, numeric_features),\n        (\"cat\", categorical_transformer, categorical_features),\n    ]\n)\n\n# Create Model\n## We're going to switch our model from LinearRegression to RandomForestRegressor\n## The category features made the LinearRegression model overfit to the training data we'll\n## likely need to engineer the category features before a LinearRegression model will work\nmodel = RandomForestRegressor(n_estimators=100, random_state=0)\npipeline = Pipeline(steps=[(\"preprocessor\", preprocessor), (\"model\", model)])\npipeline.fit(x_train, y_train)\n\n# Make predictions\ntrain_predictions = pipeline.predict(x_train)\nval_predictions = pipeline.predict(x_val)\n\n# Calculate metrics\ntrain_rmse = mean_squared_error(y_train, train_predictions, squared=False)\nval_rmse = mean_squared_error(y_val, val_predictions, squared=False)\ntrain_r2 = r2_score(y_train, train_predictions)\nval_r2 = r2_score(y_val, val_predictions)\n\nprint(f\"Training RMSE: {train_rmse:.2f}\")\nprint(f\"Validation RMSE: {val_rmse:.2f}\")\nprint(f\"Training R²: {train_r2:.2f}\")\nprint(f\"Validation R²: {val_r2:.2f}\")\n\ntest_predictions = pipeline.predict(test_df)\n\n# Create submission file\nsubmission_df = pd.DataFrame({\"Id\": test_df.index, \"SalePrice\": test_predictions})\nsubmission_csv = submission_df.to_csv(\"submission.csv\", index=False)\n\n# Upload to Kaggle\nif SHOULD_SUBMIT_TO_KAGGLE and not is_running_on_kaggle:\n    kaggle.api.competition_submit(\n        \"submission.csv\",\n        \"House Price Prediction\",\n        competition,\n    )","metadata":{"_uuid":"e159da77-db89-480c-9601-f6c0c8a79c7d","_cell_guid":"0eb75de2-e26d-4e72-9e25-9a727e6cc787","trusted":true,"collapsed":false,"jupyter":{"outputs_hidden":false},"execution":{"iopub.status.busy":"2025-05-31T14:45:19.757793Z","iopub.execute_input":"2025-05-31T14:45:19.758058Z","iopub.status.idle":"2025-05-31T14:45:26.891135Z","shell.execute_reply.started":"2025-05-31T14:45:19.758031Z","shell.execute_reply":"2025-05-31T14:45:26.890121Z"}},"outputs":[{"name":"stdout","text":"Training RMSE: 11422.52\nValidation RMSE: 28502.11\nTraining R²: 0.98\nValidation R²: 0.89\n","output_type":"stream"}],"execution_count":1}]}